## Description #############################################################################
#
# Tests related to the functions to create the matrices with the values of the Legendre
# associated functions.
#
############################################################################################

# == File: ./src/legendre.jl ===============================================================

# -- Functions: legendre and legendre! -----------------------------------------------------

@testset "Unnormalized" begin
    # == Float64 ===========================================================================

    # -- Default ---------------------------------------------------------------------------

    expected = [
        1.0                0.0                 0.0                 0.0
        0.9924450321351935 0.12269009002431533 0.0                 0.0
        0.9774207127147378 0.36528951101055424 0.0451585745705238  0.0
        0.9550971963095074 0.7222892661973235  0.22408701495411515 0.02770254789713661
    ]

    result = legendre(Val(:unnormalized), 0.123, 3)
    @test result ≈ expected
    @test eltype(result) == Float64

    # -- Order Higher than Degree ----------------------------------------------------------

    result = legendre(Val(:unnormalized), 0.123, 3, 5)
    @test result ≈ expected
    @test eltype(result) == Float64

    # -- Order Lower than Degree -----------------------------------------------------------

    expected = [
        1.0                0.0
        0.9924450321351935 0.12269009002431533
        0.9774207127147378 0.36528951101055424
        0.9550971963095074 0.7222892661973235
    ]

    result = legendre(Val(:unnormalized), 0.123, 3, 1)
    @test result ≈ expected
    @test eltype(result) == Float64

    # -- Angle with Negative Sine ----------------------------------------------------------

    expected = [
         1.0                  0.0                0.0                 0.0
         0.28366218546322625  0.9589242746631385 0.0                 0.0
        -0.37930364680733936  0.8160316663340547 2.7586072936146784  0.0
        -0.36843162598805346 -0.8596930972959173 3.912562868707677  13.226477490549495
    ]

    result = legendre(Val(:unnormalized), 5, 3)
    @test result ≈ expected
    @test eltype(result) == Float64

    # -- Phase Term ------------------------------------------------------------------------

    expected = [
        1.0                 0.0                 0.0                  0.0
        0.9924450321351935 -0.12269009002431533 0.0                  0.0
        0.9774207127147378 -0.36528951101055424 0.0451585745705238   0.0
        0.9550971963095074 -0.7222892661973235  0.22408701495411515 -0.02770254789713661
    ]

    result = legendre(Val(:unnormalized), 0.123, 3; ph_term = true)
    @test result ≈ expected
    @test eltype(result) == Float64

    # -- In-Place --------------------------------------------------------------------------

    expected = [
        1.0                0.0                 0.0 0.0
        0.9924450321351935 0.12269009002431533 0.0 0.0
        0.9774207127147378 0.36528951101055424 0.0 0.0
        0.9550971963095074 0.7222892661973235  0.0 0.0
    ]

    result = zeros(Float64, 4, 4)
    legendre!(Val(:unnormalized), result, 0.123, 3, 1)
    @test result ≈ expected

    expected = [
        1.0                0.0                 0.0                 0.0
        0.9924450321351935 0.12269009002431533 0.0                 0.0
        0.9774207127147378 0.36528951101055424 0.0451585745705238  0.0
        0.9550971963095074 0.7222892661973235  0.22408701495411515 0.02770254789713661
    ]

    result = zeros(Float64, 4, 4)
    legendre!(Val(:unnormalized), result, 0.123, 10, 20)
    @test result ≈ expected

    # == Float32 ===========================================================================

    expected = Float32[
        1.0        0.0        0.0        0.0
        0.99244505 0.1226901  0.0        0.0
        0.9774208  0.36528954 0.04515858 0.0
        0.9550973  0.7222893  0.22408706 0.027702551
    ]

    result = legendre(Val(:unnormalized), 0.123f0, 3)
    @test result ≈ expected
    @test eltype(result) == Float32
end

@testset "Schmidt Quasi-Normalization" begin
    # == Float64 ===========================================================================

    # -- Default ---------------------------------------------------------------------------

    expected = [
        1.0                0.0                 0.0                  0.0
        0.9924450321351935 0.12269009002431533 0.0                  0.0
        0.9774207127147378 0.21089999751409028 0.013036157592255852 0.0
        0.9550971963095074 0.29487335814545546 0.028929509233954008 0.001460052472414327
    ]

    result = legendre(Val(:schmidt), 0.123, 3)
    @test result ≈ expected
    @test eltype(result) == Float64

    # -- Order Higher than Degree ----------------------------------------------------------

    result = legendre(Val(:schmidt), 0.123, 3, 5)
    @test result ≈ expected
    @test eltype(result) == Float64

    # -- Order Lower than Degree -----------------------------------------------------------

    expected = [
        1.0                0.0
        0.9924450321351935 0.12269009002431533
        0.9774207127147378 0.21089999751409028
        0.9550971963095074 0.29487335814545546
    ]

    result = legendre(Val(:schmidt), 0.123, 3, 1)
    @test result ≈ expected
    @test eltype(result) == Float64

    # -- Angle with Negative Sine ----------------------------------------------------------

    expected = [
         1.0                  0.0                  0.0                0.0
         0.28366218546322625  0.9589242746631385   0.0                0.0
        -0.37930364680733936  0.47113610222522534  0.7963413317784498 0.0
        -0.36843162598805346 -0.35096823729464166  0.505109694383145  0.6970965715180766
    ]

    result = legendre(Val(:schmidt), 5, 3)
    @test result ≈ expected
    @test eltype(result) == Float64

    # -- Phase Term ------------------------------------------------------------------------

    expected = [
        1.0                 0.0                 0.0                   0.0
        0.9924450321351935 -0.12269009002431533 0.0                   0.0
        0.9774207127147378 -0.21089999751409028 0.013036157592255852  0.0
        0.9550971963095074 -0.29487335814545546 0.028929509233954008 -0.001460052472414327
    ]

    result = legendre(Val(:schmidt), 0.123, 3; ph_term = true)
    @test result ≈ expected
    @test eltype(result) == Float64

    # -- In-Place --------------------------------------------------------------------------

    expected = [
        1.0                0.0                 0.0 0.0
        0.9924450321351935 0.12269009002431533 0.0 0.0
        0.9774207127147378 0.21089999751409028 0.0 0.0
        0.9550971963095074 0.29487335814545546 0.0 0.0
    ]

    result = zeros(Float64, 4, 4)
    legendre!(Val(:schmidt), result, 0.123, 3, 1)
    @test result ≈ expected

    expected = [
        1.0                0.0                 0.0                  0.0
        0.9924450321351935 0.12269009002431533 0.0                  0.0
        0.9774207127147378 0.21089999751409028 0.013036157592255852 0.0
        0.9550971963095074 0.29487335814545546 0.028929509233954008 0.001460052472414327
    ]

    result = zeros(Float64, 4, 4)
    legendre!(Val(:schmidt), result, 0.123, 10, 20)
    @test result ≈ expected

    # == Float32 ===========================================================================

    expected = Float32[
        1.0        0.0        0.0         0.0
        0.99244505 0.1226901  0.0         0.0
        0.9774208  0.21090002 0.013036159 0.0
        0.9550973  0.2948734  0.028929513 0.0014600528
    ]

    result = legendre(Val(:schmidt), 0.123f0, 3)
    @test result ≈ expected
    @test eltype(result) == Float32
end

@testset "Full Normalization" begin
    # == Float64 ===========================================================================

    # -- Default ---------------------------------------------------------------------------

    expected = [
        1.0                0.0                0.0                  0.0
        1.7189652193774823 0.2125054695073136 0.0                  0.0
        2.185579156246447  0.4715867308960424 0.029149734541684073 0.0
        2.526949659329994  0.7801615739113572 0.07654028698418901  0.003862935743113303
    ]

    result = legendre(Val(:full), 0.123, 3)
    @test result ≈ expected
    @test eltype(result) == Float64

    # -- Order Higher than Degree ----------------------------------------------------------

    result = legendre(Val(:full), 0.123, 3, 5)
    @test result ≈ expected
    @test eltype(result) == Float64

    # -- Order Lower than Degree -----------------------------------------------------------

    expected = [
        1.0                0.0
        1.7189652193774823 0.2125054695073136
        2.185579156246447  0.4715867308960424
        2.526949659329994  0.7801615739113572
    ]

    result = legendre(Val(:full), 0.123, 3, 1)
    @test result ≈ expected
    @test eltype(result) == Float64

    # -- Angle with Negative Sine ----------------------------------------------------------

    expected = [
         1.0                 0.0                 0.0                0.0
         0.4913173174083336  1.6609055643276887  0.0                0.0
        -0.8481487383747819  1.0534923512298937  1.7806733511493273 0.0
        -0.9747784574955511 -0.9285746739643262  1.336394636145641  1.8443441680325823
    ]

    result = legendre(Val(:full), 5, 3)
    @test result ≈ expected
    @test eltype(result) == Float64

    # -- Phase Term ------------------------------------------------------------------------

    expected = [
        1.0                 0.0                0.0                   0.0
        1.7189652193774823 -0.2125054695073136 0.0                   0.0
        2.185579156246447  -0.4715867308960424 0.029149734541684073  0.0
        2.526949659329994  -0.7801615739113572 0.07654028698418901  -0.003862935743113303
    ]

    result = legendre(Val(:full), 0.123, 3; ph_term = true)
    @test result ≈ expected
    @test eltype(result) == Float64

    # -- In-Place --------------------------------------------------------------------------

    expected = [
        1.0                0.0                0.0 0.0
        1.7189652193774823 0.2125054695073136 0.0 0.0
        2.185579156246447  0.4715867308960424 0.0 0.0
        2.526949659329994  0.7801615739113572 0.0 0.0
    ]

    result = zeros(Float64, 4, 4)
    legendre!(Val(:full), result, 0.123, 3, 1)
    @test result ≈ expected

    expected = [
        1.0                0.0                0.0                  0.0
        1.7189652193774823 0.2125054695073136 0.0                  0.0
        2.185579156246447  0.4715867308960424 0.029149734541684073 0.0
        2.526949659329994  0.7801615739113572 0.07654028698418901  0.003862935743113303
    ]

    result = zeros(Float64, 4, 4)
    legendre!(Val(:full), result, 0.123, 10, 20)
    @test result ≈ expected

    # == Float32 ===========================================================================

    expected = Float32[
        1.0       0.0        0.0         0.0
        1.7189652 0.21250547 0.0         0.0
        2.1855793 0.47158676 0.029149737 0.0
        2.5269504 0.7801616  0.07654029  0.0038629363
    ]

    result = legendre(Val(:full), 0.123f0, 3)
    @test result ≈ expected
    @test eltype(result) == Float32
end

@testset "Errors" begin
    @test_throws ArgumentError legendre(Val(:unnormalized), 0.123, -2)
    @test_throws ArgumentError legendre(Val(:schmidt), 0.123, -2)
    @test_throws ArgumentError legendre(Val(:full), 0.123, -2)
end
