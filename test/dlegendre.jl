## Description #############################################################################
#
# Tests related to the functions to create the matrices with the values of the Legendre
# associated function derivatives.
#
############################################################################################

# == File: ./src/dlegendre.jl ==============================================================

# -- Functions: dlegendre and dlegendre! ---------------------------------------------------

@testset "Unnormalized" begin
    # == Float64 ===========================================================================

    # -- Default ---------------------------------------------------------------------------

    expected = [
         0.0                 0.0                0.0                0.0
        -0.12269009002431533 0.9924450321351935 0.0                0.0
        -0.36528951101055424 2.909682850858952  0.7305790220211085 0.0
        -0.7222892661973235  5.618539670379986  3.5975950570380495 0.6722610448623454
    ]

    result, ~ = dlegendre(Val(:unnormalized), 0.123, 3)
    @test result ≈ expected
    @test eltype(result) == Float64

    # -- Order Higher than Degree ----------------------------------------------------------

    result, ~ = dlegendre(Val(:unnormalized), 0.123, 3, 5)
    @test result ≈ expected
    @test eltype(result) == Float64

    # -- Order Lower than Degree -----------------------------------------------------------

    expected_dP = [
         0.0                 0.0
        -0.12269009002431533 0.9924450321351935
        -0.36528951101055424 2.909682850858952
        -0.7222892661973235  5.618539670379986
    ]

    expected_P = [
        1.0                0.0                 0.0
        0.9924450321351935 0.12269009002431533 0.0
        0.9774207127147378 0.36528951101055424 0.0451585745705238
        0.9550971963095074 0.7222892661973235  0.22408701495411515
    ]

    result_dP, result_P = dlegendre(Val(:unnormalized), 0.123, 3, 1)
    @test result_dP ≈ expected_dP
    @test result_P  ≈ expected_P
    @test eltype(result_dP) == Float64
    @test eltype(result_P)  == Float64

    # -- Angle with Negative Sine ----------------------------------------------------------

    expected = [
         0.0                 0.0                  0.0                  0.0
         0.9589242746631385 -0.28366218546322625  0.0                  0.0
         0.8160316663340547  2.517214587229357   -1.6320633326681093   0.0
        -0.8596930972959173  4.166871190282159   10.911704231754335  -11.737688606123031
    ]

    result, ~ = dlegendre(Val(:unnormalized), 5, 3)
    @test result ≈ expected
    @test eltype(result) == Float64

    # -- Phase Term ------------------------------------------------------------------------

    expected = [
         0.0                  0.0                0.0                 0.0
        -0.12269009002431533 -0.9924450321351935 0.0                 0.0
        -0.36528951101055424 -2.909682850858952  0.7305790220211085  0.0
        -0.7222892661973235  -5.618539670379986  3.5975950570380495 -0.6722610448623454
    ]

    result, ~ = dlegendre(Val(:unnormalized), 0.123, 3; ph_term = true)
    @test result ≈ expected
    @test eltype(result) == Float64

    # -- In-Place --------------------------------------------------------------------------

    expected = [
         0.0                 0.0                0.0 0.0
        -0.12269009002431533 0.9924450321351935 0.0 0.0
        -0.36528951101055424 2.909682850858952  0.0 0.0
        -0.7222892661973235  5.618539670379986  0.0 0.0
    ]

    P = legendre(Val(:unnormalized), 0.123, 3, 2)
    result = zeros(Float64, 4, 4)
    dlegendre!(Val(:unnormalized), result, 0.123, P, 3, 1)
    @test result ≈ expected
    @test eltype(result) == Float64

    expected = [
         0.0                 0.0                0.0                0.0
        -0.12269009002431533 0.9924450321351935 0.0                0.0
        -0.36528951101055424 2.909682850858952  0.7305790220211085 0.0
        -0.7222892661973235  5.618539670379986  3.5975950570380495 0.6722610448623454
    ]

    P = legendre(Val(:unnormalized), 0.123, 4, 4)
    result = zeros(Float64, 4, 4)
    dlegendre!(Val(:unnormalized), result, 0.123, P, 10, 20)
    @test result ≈ expected
    @test eltype(result) == Float64

    # == Float32 ===========================================================================

    expected = Float32[
         0.0        0.0        0.0       0.0
        -0.1226901  0.99244505 0.0       0.0
        -0.36528954 2.9096832  0.7305791 0.0
        -0.7222893  5.618541   3.5975955 0.6722612
    ]

    result, ~ = dlegendre(Val(:unnormalized), 0.123f0, 3)
    @test result ≈ expected
    @test eltype(result) == Float32
end

@testset "Schmidt Quasi-Normalization" begin
    # == Float64 ===========================================================================

    # -- Default ---------------------------------------------------------------------------

    expected = [
         0.0                 0.0                0.0                 0.0
        -0.12269009002431533 0.9924450321351935 0.0                 0.0
        -0.36528951101055424 1.6799061771998531 0.21089999751409028 0.0
        -0.7222892661973236  2.293759215336026  0.46444752474354967 0.03543126806616079
    ]

    result, ~ = dlegendre(Val(:schmidt), 0.123, 3)
    @test result ≈ expected
    @test eltype(result) == Float64

    # -- Order Higher than Degree ----------------------------------------------------------

    result, ~ = dlegendre(Val(:schmidt), 0.123, 3, 5)
    @test result ≈ expected
    @test eltype(result) == Float64

    # -- Order Lower than Degree -----------------------------------------------------------

    expected_dP = [
         0.0                 0.0
        -0.12269009002431533 0.9924450321351935
        -0.36528951101055424 1.6799061771998531
        -0.7222892661973236  2.293759215336026
    ]

    expected_P = [
        1.0                0.0                 0.0
        0.9924450321351935 0.12269009002431533 0.0
        0.9774207127147378 0.21089999751409028 0.013036157592255852
        0.9550971963095074 0.29487335814545546 0.028929509233954008
    ]

    result_dP, result_P = dlegendre(Val(:schmidt), 0.123, 3, 1)
    @test result_dP ≈ expected_dP
    @test result_P  ≈ expected_P
    @test eltype(result_dP) == Float64
    @test eltype(result_P)  == Float64

    # -- Angle with Negative Sine ----------------------------------------------------------

    expected = [
         0.0                 0.0                  0.0                  0.0
         0.9589242746631385 -0.28366218546322625  0.0                  0.0
         0.8160316663340547  1.453314519544922   -0.47113610222522534  0.0
        -0.8596930972959171  1.7011180400158135   1.4086949589441842  -0.6186305076859298
    ]

    result, ~ = dlegendre(Val(:schmidt), 5, 3)
    @test result ≈ expected
    @test eltype(result) == Float64

    # -- Phase Term ------------------------------------------------------------------------

    expected = [
         0.0                  0.0                0.0                  0.0
        -0.12269009002431533 -0.9924450321351935 0.0                  0.0
        -0.36528951101055424 -1.6799061771998531 0.21089999751409028  0.0
        -0.7222892661973236  -2.293759215336026  0.46444752474354967 -0.03543126806616079
    ]

    result, ~ = dlegendre(Val(:schmidt), 0.123, 3; ph_term = true)
    @test result ≈ expected
    @test eltype(result) == Float64

    # -- In-Place --------------------------------------------------------------------------

    expected = [
         0.0                 0.0                0.0 0.0
        -0.12269009002431533 0.9924450321351935 0.0 0.0
        -0.36528951101055424 1.6799061771998531 0.0 0.0
        -0.7222892661973236  2.293759215336026  0.0 0.0
    ]

    P = legendre(Val(:schmidt), 0.123, 3, 2)
    result = zeros(Float64, 4, 4)
    dlegendre!(Val(:schmidt), result, 0.123, P, 3, 1)
    @test result ≈ expected
    @test eltype(result) == Float64

    expected = [
         0.0                 0.0                0.0                 0.0
        -0.12269009002431533 0.9924450321351935 0.0                 0.0
        -0.36528951101055424 1.6799061771998531 0.21089999751409028 0.0
        -0.7222892661973236  2.293759215336026  0.46444752474354967 0.03543126806616079
    ]

    P = legendre(Val(:schmidt), 0.123, 4, 4)
    result = zeros(Float64, 4, 4)
    dlegendre!(Val(:schmidt), result, 0.123, P, 10, 20)
    @test result ≈ expected
    @test eltype(result) == Float64

    # == Float32 ===========================================================================

    expected = Float32[
         0.0        0.0        0.0        0.0
        -0.1226901  0.99244505 0.0        0.0
        -0.36528954 1.6799064  0.21090002 0.0
        -0.7222894  2.2937596  0.46444756 0.035431273
    ]

    result, ~ = dlegendre(Val(:schmidt), 0.123f0, 3)
    @test result ≈ expected
    @test eltype(result) == Float32
end

@testset "Full Normalization" begin
    # == Float64 ===========================================================================

    # -- Default ---------------------------------------------------------------------------

    expected = [
         0.0                0.0                0.0                0.0
        -0.2125054695073136 1.7189652193774823 0.0                0.0
        -0.816812178087257  3.7563844080406796 0.4715867308960424 0.0
        -1.9109977730094496 6.068716451241777  1.2288126475109502 0.09374232393872588
    ]

    result, ~ = dlegendre(Val(:full), 0.123, 3)
    @test result ≈ expected
    @test eltype(result) == Float64

    # -- Order Higher than Degree ----------------------------------------------------------

    result, ~ = dlegendre(Val(:full), 0.123, 3, 5)
    @test result ≈ expected
    @test eltype(result) == Float64

    # -- Order Lower than Degree -----------------------------------------------------------

    expected_dP = [
         0.0                0.0
        -0.2125054695073136 1.7189652193774823
        -0.816812178087257  3.7563844080406796
        -1.9109977730094496 6.068716451241777
    ]

    expected_P = [
        1.0                0.0                0.0
        1.7189652193774823 0.2125054695073136 0.0
        2.185579156246447  0.4715867308960424 0.029149734541684073
        2.526949659329994  0.7801615739113572 0.07654028698418901
    ]

    result_dP, result_P = dlegendre(Val(:full), 0.123, 3, 1)
    @test result_dP ≈ expected_dP
    @test result_P  ≈ expected_P
    @test eltype(result_dP) == Float64
    @test eltype(result_P)  == Float64

    # -- Angle with Negative Sine ----------------------------------------------------------

    expected = [
         0.0                 0.0                 0.0                 0.0
         1.6609055643276887 -0.4913173174083336  0.0                 0.0
         1.8247022777153725  3.2497100583898924 -1.0534923512298937  0.0
        -2.2745341392838507  4.500735284647465   3.727056534516655  -1.6367424767746024
    ]

    result, ~ = dlegendre(Val(:full), 5, 3)
    @test result ≈ expected
    @test eltype(result) == Float64

    # -- Phase Term ------------------------------------------------------------------------

    expected = [
         0.0                 0.0                0.0                 0.0
        -0.2125054695073136 -1.7189652193774823 0.0                 0.0
        -0.816812178087257  -3.7563844080406796 0.4715867308960424  0.0
        -1.9109977730094496 -6.068716451241777  1.2288126475109502 -0.09374232393872588
    ]

    result, ~ = dlegendre(Val(:full), 0.123, 3; ph_term = true)
    @test result ≈ expected
    @test eltype(result) == Float64

    # -- In-Place --------------------------------------------------------------------------

    expected = [
         0.0                0.0                0.0 0.0
        -0.2125054695073136 1.7189652193774823 0.0 0.0
        -0.816812178087257  3.7563844080406796 0.0 0.0
        -1.9109977730094496 6.068716451241777  0.0 0.0
    ]

    P = legendre(Val(:full), 0.123, 3, 2)
    result = zeros(Float64, 4, 4)
    dlegendre!(Val(:full), result, 0.123, P, 3, 1)
    @test result ≈ expected
    @test eltype(result) == Float64

    expected = [
         0.0                0.0                0.0                0.0
        -0.2125054695073136 1.7189652193774823 0.0                0.0
        -0.816812178087257  3.7563844080406796 0.4715867308960424 0.0
        -1.9109977730094496 6.068716451241777  1.2288126475109502 0.09374232393872588
    ]

    P = legendre(Val(:full), 0.123, 4, 4)
    result = zeros(Float64, 4, 4)
    dlegendre!(Val(:full), result, 0.123, P, 10, 20)
    @test result ≈ expected
    @test eltype(result) == Float64

    # == Float32 ===========================================================================

    expected = Float32[
         0.0        0.0       0.0        0.0
        -0.21250547 1.7189652 0.0        0.0
        -0.8168122  3.7563846 0.47158676 0.0
        -1.910998   6.0687184 1.2288128  0.09374233
    ]

    result, ~ = dlegendre(Val(:full), 0.123f0, 3)
    @test result ≈ expected
    @test eltype(result) == Float32
end

@testset "Errors" begin
    @test_throws ArgumentError dlegendre(Val(:unnormalized), 0.123, -2)
    @test_throws ArgumentError dlegendre(Val(:schmidt), 0.123, -2)
    @test_throws ArgumentError dlegendre(Val(:full), 0.123, -2)
end
